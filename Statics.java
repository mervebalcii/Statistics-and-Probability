/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package staticproject;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.io.File;
import java.io.IOException;
import static java.lang.Math.random;
import static java.nio.file.Files.list;
import static java.rmi.Naming.list;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import static java.util.Collections.list;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import static javafx.scene.input.KeyCode.T;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.HistogramType;



/**
 *
 * @author MERVE
 */
public class Statics extends javax.swing.JFrame {
    DefaultListModel list= new DefaultListModel();
   

    /**
     * Creates new form Statics
     */
    public Statics() {
        initComponents();
        connect();
    }
    ArrayList<Double> nums=new ArrayList<>();
    double standartD, meadian, variance ,mean=0;
     static Statics from(ArrayList get) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
     void connect(){
         try {  
            Connection con=DriverManager.getConnection("jdbc:derby://localhost:1527/TOP50", "MERVE", "1234");
            Statement stm=con.createStatement();
            ResultSet rs = stm.executeQuery("SELECT LIVENESS FROM SPOTIFY");
         
           while(rs.next()){ 
               nums.add(rs.getDouble("LIVENESS"));
                }
                   
                
            } catch (Exception ex) {
                System.out.println(ex);
          
                
                
                
                
        }
         
     }
   private static final String ROW_KEY = "Liveness";

    private void display() {
        JFrame f = new JFrame("BoxPlot");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        DefaultBoxAndWhiskerCategoryDataset data = new DefaultBoxAndWhiskerCategoryDataset();
        data.add(nums, ROW_KEY, " ");
        JFreeChart chart = ChartFactory.createBoxAndWhiskerChart(
            "Box and Whisker Chart", ROW_KEY, " ", data, false);
        f.add(new ChartPanel(chart) {

            @Override
            public Dimension getPreferredSize() {
                return new Dimension(320, 480);
            }
        });
        f.pack();
        f.setLocationRelativeTo(null);
        f.setVisible(true);
    }
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mean_btn = new javax.swing.JButton();
        median_btn = new javax.swing.JButton();
        variance_btn = new javax.swing.JButton();
        stndrtD_btn = new javax.swing.JButton();
        shape_btn = new javax.swing.JButton();
        outlier_btn = new javax.swing.JButton();
        histogram_btn = new javax.swing.JButton();
        boxplot_btn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        confIntV = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 255));
        setForeground(new java.awt.Color(153, 153, 255));

        mean_btn.setText("Mean");
        mean_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mean_btnActionPerformed(evt);
            }
        });

        median_btn.setText("Meadian");
        median_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                median_btnActionPerformed(evt);
            }
        });

        variance_btn.setText("Variance");
        variance_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                variance_btnActionPerformed(evt);
            }
        });

        stndrtD_btn.setText("Standart Deviation and Stndart error");
        stndrtD_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stndrtD_btnActionPerformed(evt);
            }
        });

        shape_btn.setText(" shape of distribution ");
        shape_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shape_btnActionPerformed(evt);
            }
        });

        outlier_btn.setText("Outlier");
        outlier_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outlier_btnActionPerformed(evt);
            }
        });

        histogram_btn.setText("Histogram");
        histogram_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogram_btnActionPerformed(evt);
            }
        });

        boxplot_btn.setText("Boxplot");
        boxplot_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxplot_btnActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("%95 for mean");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("%90 how large");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        confIntV.setText("%95 for variance");
        confIntV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confIntVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mean_btn)
                                    .addComponent(stndrtD_btn)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(median_btn)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(variance_btn)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(confIntV)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shape_btn)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outlier_btn)
                    .addComponent(boxplot_btn)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(histogram_btn))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mean_btn)
                    .addComponent(shape_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outlier_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(boxplot_btn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(median_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(variance_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stndrtD_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confIntV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(histogram_btn)
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mean_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mean_btnActionPerformed
        // TODO add your handling code here:
        double sum=0;
        for( double num : nums) {
          sum = sum+num;
      } 
        double len=nums.size();
        mean=sum/len;
        System.out.println(mean);
      
         jLabel1.setText(String.valueOf(mean));        
    }//GEN-LAST:event_mean_btnActionPerformed

    private void median_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_median_btnActionPerformed
        // TODO add your handling code here:
      
         int len=nums.size();
         double[] sortL=new double[len];
         for (int i = 0; i < len; i++) {
             sortL[i]=nums.get(i);
        
        }
         Arrays.sort(sortL);
         System.out.println(Arrays.toString(sortL));       
         if(len%2==0){
             meadian=(sortL[(len-1)/2] + sortL[len/2])/2.0; 
         }else{
             meadian=sortL[(len+1)/2-1]/1.0; 
           
         } 
         jLabel2.setText(String.valueOf(meadian));
         System.out.println(meadian);
         
         
    }//GEN-LAST:event_median_btnActionPerformed

    private void variance_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_variance_btnActionPerformed
        // TODO add your handling code here:
        double sum=0;
        for( double num : nums) {
          sum = sum+num;
      } 
        double len=nums.size();
        mean=sum/len;
         double temp = 0;
        for(double a :nums)
            temp += (a-mean)*(a-mean);
        variance= temp/(len);
        System.out.println(variance);
        jLabel3.setText("pop varianca:"+String.valueOf(variance));    
        
    }//GEN-LAST:event_variance_btnActionPerformed

    private void stndrtD_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stndrtD_btnActionPerformed
        // TODO add your handling code here:
        double sum=0;
        for( double num : nums) {
          sum = sum+num;
      } 
        double len=nums.size();
        mean=sum/len;
        
         double temp = 0;
        for(double a :nums)
            temp += (a-mean)*(a-mean);
      variance= temp/(len);
      standartD=  Math.sqrt(variance);
      jLabel4.setText("pop standart Dev:"+String.valueOf(standartD));
  
        System.out.println(standartD);
                

      double popStndr_error=0;
      popStndr_error=standartD/Math.sqrt(len);
      jLabel6.setText("pop standart er:"+ String.valueOf(popStndr_error));
    
        
    }//GEN-LAST:event_stndrtD_btnActionPerformed

    private void shape_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shape_btnActionPerformed
        // TODO add your handling code here:
        double sum=0;
        for( double num : nums) {
          sum = sum+num;
      } 
        int len=nums.size();
        mean=sum/len;
         double[] sortL=new double[len];
         for (int i = 0; i < len; i++) {
             sortL[i]=nums.get(i);     
        }
         Arrays.sort(sortL);
         System.out.println(Arrays.toString(sortL));
         if(len%2==0){
             meadian=(sortL[(len-1)/2] + sortL[len/2])/2.0;
             
         }else{
             meadian=sortL[(len+1)/2-1]/1.0;
         }
         if(mean<meadian){
             System.out.println("left-skewed ");
             jLabel5.setText("left-skewed ");
         }else if(mean>meadian){
             System.out.println("right-skewed ");
             jLabel5.setText("right-skewed");
             
         }else if(mean==meadian){
             System.out.println(" symmetric ");
             jLabel5.setText(" symmetric ");
         }
         
        
        
        
    }//GEN-LAST:event_shape_btnActionPerformed

    private void outlier_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outlier_btnActionPerformed
        // TODO add your handling code here:
        int len=nums.size();
         double[] sortL=new double[len];
         for (int i = 0; i < len; i++) {
             sortL[i]=nums.get(i);
        }
          Arrays.sort(sortL);
         System.out.println(Arrays.toString(sortL));
         int end_q1=len/2-1;
         int end_q3=len-1;
         int start_q3=(len) / 2;
         double q1,q3=0;
         if(len % 2 == 1){
             
           double value1 = sortL[(end_q1 + 0) / 2];
            double value2 = sortL[(end_q1 + 0) / 2 + 1];
             q1= (value1 + value2) / 2; 
            double value = sortL[(end_q3 + start_q3) / 2];
            double value22 = sortL[(end_q3 + start_q3) / 2 + 1];
           
             q3= (value + value22) /2; 
             System.out.println(q1);
             System.out.println(q3);  
         }else{
              q1=(sortL[(end_q1+0)/2]);
              q3=(sortL[(end_q3+start_q3)/2]);
             System.out.println(q1);
             System.out.println(q3);
            
         }
         
         double iqr=q3-q1;
         double dstnc_q1= q1-(iqr*(1.5));
         double dstnc_q3= q3+(iqr*(1.5));
         System.out.println("["+ dstnc_q1 +"  "+dstnc_q3+ "]" );      
         for (int i = 0; i < len; i++) {
             
             if(sortL[i]<dstnc_q1 || sortL[i]>dstnc_q3){
                 list.addElement(sortL[i]);
              
              System.out.println(sortL[i]);                    
          }
        }
    jTextArea1.setText("q1="+ String.valueOf(q1) +"\nq3="+String.valueOf(q3)+ "\niqr = "+String.valueOf(iqr) +"\n["+ dstnc_q1 +"  "+dstnc_q3+ "]" + "\n"+String.valueOf(list)+"\n");

    }//GEN-LAST:event_outlier_btnActionPerformed

    private void histogram_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogram_btnActionPerformed
        // TODO add your handling code here
      int len=nums.size();
         double[] sortL=new double[len];
         for (int i = 0; i < len; i++) {
             sortL[i]=nums.get(i);
         }
       Arrays.sort(sortL);
       int number = 7;
       HistogramDataset dataset = new HistogramDataset();
       dataset.setType(HistogramType.FREQUENCY);
       dataset.addSeries("Histogram",sortL,number);
       String plotTitle = "Histogram"; 
       String xaxis = "number";
       String yaxis = "value"; 
       PlotOrientation orientation = PlotOrientation.VERTICAL; 
       boolean show = true; 
       boolean toolTips = true;
       boolean urls = false;     
      JFreeChart chart = ChartFactory.createHistogram( plotTitle, xaxis, yaxis, 
      dataset, orientation, show, toolTips, urls);  
      ChartFrame chartfrm=new ChartFrame("numbers", chart,true);
      chartfrm.setVisible(true);
      chartfrm.setSize(1000,1000);
     
    }//GEN-LAST:event_histogram_btnActionPerformed

    private void boxplot_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxplot_btnActionPerformed
        // TODO add your handling code here:
        int len=nums.size();
         double[] sortL=new double[len];
         for (int i = 0; i < len; i++) {
             sortL[i]=nums.get(i);     
        }
         Arrays.sort(sortL);
         double q2=0;
         if(len%2==0){
             q2=(sortL[(len-1)/2] + sortL[len/2])/2.0;
             
         }else{
             q2=sortL[(len+1)/2-1]/1.0;
     }         
         int end_q1=len/2-1;
         int end_q3=len-1;
         int start_q3=(len) / 2;
         double q1,q3=0;
         if(len % 2 == 1){
           double value1 = sortL[(end_q1 + 0) / 2];
            double value2 = sortL[(end_q1 + 0) / 2 + 1];
             q1= (value1 + value2) / 2; 
            double value = sortL[(end_q3 + start_q3) / 2];
            double value22 = sortL[(end_q3 + start_q3) / 2 + 1];
             q3= (value + value22) /2; 
             }else{
              q1=(sortL[(end_q1+0)/2]);
              q3=(sortL[(end_q3+start_q3)/2]);
         }
         double iqr=q3-q1;
         double dstnc_q1= q1-(iqr*(1.5));
         double dstnc_q3= q3+(iqr*(1.5));
         System.out.println("["+ dstnc_q1 +"  "+dstnc_q3+ "]" );
             for (int i = 0; i < len; i++) {
             
             if(sortL[i]<dstnc_q1 || sortL[i]>dstnc_q3){
                 list.addElement(sortL[i]);
      
          }
               }
         double min=0;
         double maks=0;
         for (int i = 0; i < len; i++) {
             if(sortL[i]>dstnc_q1 && sortL[i]<dstnc_q3){
             min=(double) sortL[0];
             maks=(double) sortL[i];
                 
           
          }    
            }  
         
            System.out.println(maks);
            System.out.println(min);   
            
         System.out.println("---|min="+ min + "   | q1="+ q1+ "   | q2="+ q2+ "   | q3="+ q3+ "   |---maks"+ maks+ "        outliers "+list );
         jTextArea2.setText("---min="+ min + "|  q1="+ q1+ "   | q2="+ q2+ "   | q3="+ q3+ "   |---maks"+ maks+ "        outliers "+list);
             
        EventQueue.invokeLater(new Statics()::display);
        
    }//GEN-LAST:event_boxplot_btnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        double topl=0;
        double arr[]={ 19.0,18.0,15.0,11.0, 9.0, 6.0};
        for (int i = 0; i < 6; i++) {
            topl+=arr[i];        
        }
        double mean_=topl/6;
        System.out.println(mean_);
        double sum=0;
        for( double num : nums) {
          sum = sum+num;
      } 
        double len=nums.size();
        mean=sum/len;     
         double temp = 0;
        for(double a :nums)
            temp += (a-mean)*(a-mean);
        variance= temp/(len);
        System.out.println(variance);
        standartD=  Math.sqrt(variance);        
        System.out.println(standartD);
        System.out.println(variance);
        double alph=0.05;
        double alph2=alph/2.0;
        double zalph=1.96;
        double dist1=mean_-(zalph)*(standartD/Math.sqrt(6));
        double dist2=mean_+(zalph)*standartD/Math.sqrt(6);
        System.out.println(dist1+"   "+ dist2);
       jLabel7.setText(String.valueOf("   ["+(int)dist1 +"  " +(int) dist2)+ "]");        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        double sum=0;
        for( double num : nums) {
          sum = sum+num;
      } 
        double len=nums.size();
        mean=sum/len;      
        double temp = 0;
        for(double a :nums)
            temp += (a-mean)*(a-mean);  
        variance= temp/(len);
        System.out.println("vryns"+variance);
        standartD=  Math.sqrt(variance);   
        System.out.println("stnd d"+standartD);  
        double delta=0.1;
        double zalph=1.645;
        System.out.println("stdr"+standartD);
        double n=Math.pow((zalph*standartD)/delta,2);
        System.out.print("n="+ n +">");
        jLabel10.setText(String.valueOf("n="+ (int)n +" ≥"));        
        n++;
        System.out.print(",so n shoul be n= "+ n);
        jLabel9.setText(String.valueOf("\n,so n shoul be n= "+ (int)n));        

        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void confIntVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confIntVActionPerformed
        // TODO add your handling code here:
          double array[] = {19.0,18.0,15.0,11.0, 9.0, 6.0};
        int n = array.length;
        double sum = 0, alpha;
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }
        double x = sum / array.length;
        double var = 0.0;
        sum = 0;
        for (int i = 0; i < array.length; i++) {
            sum += Math.pow(array[i] - x, 2);
        }
        var = sum / (array.length - 1);
        System.out.println(var);
        System.out.println("sd"+Math.sqrt(var));
        double sd=Math.sqrt(var);

        alpha = 0.05;
        alpha = alpha / 2;
        double x_alpha=12.8;
        double x_1_alpha=0.83;
        double d1,d2;
        d1=((array.length-1)*var)/x_alpha;
        d2=((array.length-1)*var)/x_1_alpha;
        System.out.println(" ");
        System.out.println(d1 + " "+d2);
       jLabel8.setText(String.valueOf(" ["+(int)d1 +"  " +(int) d2)+ "]");        

       
    }//GEN-LAST:event_confIntVActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Statics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Statics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Statics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Statics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Statics().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boxplot_btn;
    private javax.swing.JButton confIntV;
    private javax.swing.JButton histogram_btn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton mean_btn;
    private javax.swing.JButton median_btn;
    private javax.swing.JButton outlier_btn;
    private javax.swing.JButton shape_btn;
    private javax.swing.JButton stndrtD_btn;
    private javax.swing.JButton variance_btn;
    // End of variables declaration//GEN-END:variables
}
